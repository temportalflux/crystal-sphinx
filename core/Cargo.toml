[package]
name = "crystal-sphinx"
version = "0.1.0"
authors = ["Dustin Yost <dustin.yost.t@gmail.com>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
profile = []
debug = []

[dependencies]
engine = { path = "../temportal-engine/engine", package = "temportal-engine" }

# [metrics] for writing runtime information to log file/console
log = "0.4"
# [metrics] for getting performance information and rendering via any chosen viewer
profiling = { version = "1.0", features = ["profile-with-tracy"] }

# [error] collapsing any error into one result type
anyhow = "1.0"
# [error] easy implementation of new errors
thiserror = "1.0"

# [async] base async traits
futures = "0.3"
# [async] adv async traits
futures-util = "0.3"
# [async] async/await syntax and multithreading
tokio = { version = "1.15", features = ["full"] }

# [ui] debug immediate-mode UI
egui = "0.15"
# [ecs]
hecs = { version = "0.7", features = ["serde", "macros"] }

# [net] rust implementation of QUIC protocol
quinn = "0.8"
# [net] underlying protocols for qiunn
rustls = { version = "0.20", default-features = false, features = ["tls12", "dangerous_configuration"] }
# [net] hashing certificates for getting fingerprints
sha2 = "0.10"
# [net] encoding certificates for getting fingerprints
base64ct = { version = "1.3", features = ["alloc"] }
# [net] generating insecure network identification
rcgen = "0.8"
# [net] reading network identification from file
rustls-pemfile = "0.2"
# [net] [en/de]crypting data for key exchange
ring = "0.16"
# [net] high-level wrapper around quinn which contains dynamic message handling
socknet = { path = "../crates/socknet/socknet", features = ["derive"] }

# [serialization] general usage
serde = { version = "1.0", features = ["derive"] }
# [serialization] json
serde_json = "1.0"
# [serialization] RustMessagePack binary
rmp = "0.8"
# [serialization] RustMessagePack binary
rmp-serde = "0.15"
# [serialization] to binary
bincode = "1.3"
# [serialization] node-like syntax
kdl = "3.0"
# [serialization] kdl wrapper for enforcing schemas
kdl-schema = { path = "../temportal-engine/crates/kdl-schema" }

# [channel] [ sync] single-producer multi-consumer  multi-consumption
bus = "2.2"
# [channel] [ sync]  multi-producer multi-consumer single-consumption
crossbeam-channel = "0.5"
# [channel] [async]  multi-producer multi-consumer single-consumption
async-channel = "1.6"

# [utility] pseudo/generated randomness
rand = "0.8"
# [utility] semantic versioning
semver = "1.0"
uuid = { version = "0.8", features = ["v4", "serde"] }
# [utility] timezone sensitive std::time
chrono = { version = "0.4", features = ["serde"]}

# [collections] similar to a bitmap but for any enum with a derive-trait implemented
enumset = { version = "1.0", features = ["serde"] }
# [collections] one-to-many_of<T> relationship data structure
multimap = "0.8"
